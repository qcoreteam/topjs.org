<!DOCTYPE html>
<!-- saved from url=(0072)https://phpunit.de/manual/current/en/fixtures.html#fixtures.global-state -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>PHPUnit Manual – Chapter&nbsp;4.&nbsp;Fixtures</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="canonical" href="https://phpunit.de/manual/current/en/fixtures.html">
  <link href="./PHPUnit Manual – Chapter 4. Fixtures_files/bootstrap.min.css" rel="stylesheet">
  <link href="./PHPUnit Manual – Chapter 4. Fixtures_files/highlight.css" rel="stylesheet">
  <link href="./PHPUnit Manual – Chapter 4. Fixtures_files/style.css" rel="stylesheet">
  <link href="./PHPUnit Manual – Chapter 4. Fixtures_files/css" rel="stylesheet" type="text/css">
  <!--[if lt IE 9]><script src="js/html5shiv.min.js"></script><![endif]-->
 </head>
 <body cz-shortcut-listen="true">
  <nav class="navbar navbar-default" role="navigation">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
    </div>
    <div class="collapse navbar-collapse">
      <ul class="nav navbar-nav navbar-left"><li><a href="https://phpunit.de/">PHPUnit</a></li><li><a href="https://phpunit.de/manual/6.0/en/index.html">6.0 (beta)</a></li><li class="active"><a href="https://phpunit.de/manual/5.7/en/index.html">5.7 (<strong>stable</strong>)</a></li><li><a href="https://phpunit.de/manual/4.8/en/index.html">4.8 (old)</a></li></ul>
      <ul class="nav navbar-nav navbar-right"><li class="active"><a href="https://phpunit.de/manual/current/en/index.html">English</a></li><li><a href="https://phpunit.de/manual/current/ja/index.html">Japanese</a></li><li><a href="https://phpunit.de/manual/current/pt_br/index.html">Brazilian Portuguese</a></li><li><a href="https://phpunit.de/manual/current/zh_cn/index.html">Simplified Chinese</a></li></ul>
    </div>
  </nav>
  <div class="container-fluid">
   <div class="row">
    <div class="col-md-4 col-lg-3">
     <div class="well well-sm sidebar-nav">
<dl class="toc nav hidden-print"><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/installation.html">1. Installing PHPUnit</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/installation.html#installation.requirements">Requirements</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/installation.html#installation.phar">PHP Archive (PHAR)</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/installation.html#installation.phar.windows">Windows</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/installation.html#installation.phar.verification">Verifying PHPUnit PHAR Releases</a></span></dt></dl></dd><dt><span class="section"><a href="https://phpunit.de/manual/current/en/installation.html#installation.composer">Composer</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/installation.html#installation.optional-packages">Optional packages</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html">2. Writing Tests for PHPUnit</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.test-dependencies">Test Dependencies</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers">Data Providers</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.exceptions">Testing Exceptions</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.errors">Testing PHP Errors</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.output">Testing Output</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.error-output">Error output</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.error-output.edge-cases">Edge cases</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/textui.html">3. The Command-Line Test Runner</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/textui.html#textui.clioptions">Command-Line Options</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/fixtures.html" class="active">4. Fixtures</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/fixtures.html#fixtures.more-setup-than-teardown">More setUp() than tearDown()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/fixtures.html#fixtures.variations">Variations</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/fixtures.html#fixtures.sharing-fixture">Sharing Fixture</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/fixtures.html#fixtures.global-state">Global State</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/organizing-tests.html">5. Organizing Tests</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/organizing-tests.html#organizing-tests.filesystem">Composing a Test Suite Using the Filesystem</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/organizing-tests.html#organizing-tests.xml-configuration">Composing a Test Suite Using XML Configuration</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/risky-tests.html">6. Risky Tests</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/risky-tests.html#risky-tests.useless-tests">Useless Tests</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/risky-tests.html#risky-tests.unintentionally-covered-code">Unintentionally Covered Code</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/risky-tests.html#risky-tests.output-during-test-execution">Output During Test Execution</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/risky-tests.html#risky-tests.test-execution-timeout">Test Execution Timeout</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/risky-tests.html#risky-tests.global-state-manipulation">Global State Manipulation</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html">7. Incomplete and Skipped Tests</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.incomplete-tests">Incomplete Tests</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.skipping-tests">Skipping Tests</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.skipping-tests-using-requires">Skipping Tests using @requires</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/database.html">8. Database Testing</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.supported-vendors-for-database-testing">Supported Vendors for Database Testing</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.difficulties-in-database-testing">Difficulties in Database Testing</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.the-four-stages-of-a-database-test">The four stages of a database test</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.clean-up-database">1. Clean-Up Database</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.set-up-fixture">2. Set up fixture</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.run-test-verify-outcome-and-teardown">3–5. Run Test, Verify outcome and Teardown</a></span></dt></dl></dd><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.configuration-of-a-phpunit-database-testcase">Configuration of a PHPUnit Database TestCase</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.implementing-getconnection">Implementing getConnection()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.implementing-getdataset">Implementing getDataSet()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.what-about-the-database-schema-ddl">What about the Database Schema (DDL)?</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.tip-use-your-own-abstract-database-testcase">Tip: Use your own Abstract Database TestCase</a></span></dt></dl></dd><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.understanding-datasets-and-datatables">Understanding DataSets and DataTables</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.available-implementations">Available Implementations</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.beware-of-foreign-keys">Beware of Foreign Keys</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.implementing-your-own-datasetsdatatables">Implementing your own DataSets/DataTables</a></span></dt></dl></dd><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.the-connection-api">The Connection API</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.database-assertions-api">Database Assertions API</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.asserting-the-row-count-of-a-table">Asserting the Row-Count of a Table</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.asserting-the-state-of-a-table">Asserting the State of a Table</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.asserting-the-result-of-a-query">Asserting the Result of a Query</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.asserting-the-state-of-multiple-tables">Asserting the State of Multiple Tables</a></span></dt></dl></dd><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.frequently-asked-questions">Frequently Asked Questions</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.will-phpunit-re-create-the-database-schema-for-each-test">Will PHPUnit (re-)create the database schema for each
             test?</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.am-i-required-to-use-pdo-in-my-application-for-the-database-extension-to-work">Am I required to use PDO in my application for the Database
             Extension to work?</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.what-can-i-do-when-i-get-a-too-much-connections-error">What can I do, when I get a
             <span class="quote">“<span class="quote">Too much Connections</span>”</span> Error?</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/database.html#database.how-to-handle-null-with-flat-xml-csv-datasets">How to handle NULL with Flat XML / CSV Datasets?</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/test-doubles.html">9. Test Doubles</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/test-doubles.html#test-doubles.stubs">Stubs</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/test-doubles.html#test-doubles.mock-objects">Mock Objects</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/test-doubles.html#test-doubles.prophecy">Prophecy</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/test-doubles.html#test-doubles.mocking-traits-and-abstract-classes">Mocking Traits and Abstract Classes</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/test-doubles.html#test-doubles.stubbing-and-mocking-web-services">Stubbing and Mocking Web Services</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/test-doubles.html#test-doubles.mocking-the-filesystem">Mocking the Filesystem</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/testing-practices.html">10. Testing Practices</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/testing-practices.html#testing-practices.during-development">During Development</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/testing-practices.html#testing-practices.during-debugging">During Debugging</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/code-coverage-analysis.html">11. Code Coverage Analysis</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/code-coverage-analysis.html#code-coverage-analysis.metrics">Software Metrics for Code Coverage</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/code-coverage-analysis.html#code-coverage-analysis.whitelisting-files">Whitelisting Files</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/code-coverage-analysis.html#code-coverage-analysis.ignoring-code-blocks">Ignoring Code Blocks</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/code-coverage-analysis.html#code-coverage-analysis.specifying-covered-methods">Specifying Covered Methods</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/code-coverage-analysis.html#code-coverage-analysis.edge-cases">Edge Cases</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/other-uses-for-tests.html">12. Other Uses for Tests</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/other-uses-for-tests.html#other-uses-for-tests.agile-documentation">Agile Documentation</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/other-uses-for-tests.html#other-uses-for-tests.cross-team-tests">Cross-Team Tests</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/logging.html">13. Logging</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/logging.html#logging.xml">Test Results (XML)</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/logging.html#logging.tap">Test Results (TAP)</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/logging.html#logging.json">Test Results (JSON)</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/logging.html#logging.codecoverage.xml">Code Coverage (XML)</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/logging.html#logging.codecoverage.text">Code Coverage (TEXT)</a></span></dt></dl></dd><dt><span class="chapter"><a href="https://phpunit.de/manual/current/en/extending-phpunit.html">14. Extending PHPUnit</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/extending-phpunit.html#extending-phpunit.PHPUnit_Framework_TestCase">Subclass PHPUnit\Framework\TestCase</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/extending-phpunit.html#extending-phpunit.custom-assertions">Write custom assertions</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/extending-phpunit.html#extending-phpunit.PHPUnit_Framework_TestListener">Implement PHPUnit_Framework_TestListener</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/extending-phpunit.html#extending-phpunit.PHPUnit_Extensions_TestDecorator">Subclass PHPUnit_Extensions_TestDecorator</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/extending-phpunit.html#extending-phpunit.PHPUnit_Framework_Test">Implement PHPUnit_Framework_Test</a></span></dt></dl></dd><dt><span class="appendix"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html">A. Assertions</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertArrayHasKey">assertArrayHasKey()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertClassHasAttribute">assertClassHasAttribute()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertArraySubset">assertArraySubset()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertClassHasStaticAttribute">assertClassHasStaticAttribute()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertContains">assertContains()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertContainsOnly">assertContainsOnly()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertContainsOnlyInstancesOf">assertContainsOnlyInstancesOf()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertCount">assertCount()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertDirectoryExists">assertDirectoryExists()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertDirectoryIsReadable">assertDirectoryIsReadable()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertDirectoryIsWritable">assertDirectoryIsWritable()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertEmpty">assertEmpty()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertEqualXMLStructure">assertEqualXMLStructure()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertEquals">assertEquals()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertFalse">assertFalse()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertFileEquals">assertFileEquals()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertFileExists">assertFileExists()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertFileIsReadable">assertFileIsReadable()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertFileIsWritable">assertFileIsWritable()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertGreaterThan">assertGreaterThan()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertGreaterThanOrEqual">assertGreaterThanOrEqual()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertInfinite">assertInfinite()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertInstanceOf">assertInstanceOf()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertInternalType">assertInternalType()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertIsReadable">assertIsReadable()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertIsWritable">assertIsWritable()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertJsonFileEqualsJsonFile">assertJsonFileEqualsJsonFile()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertJsonStringEqualsJsonFile">assertJsonStringEqualsJsonFile()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertJsonStringEqualsJsonString">assertJsonStringEqualsJsonString()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertLessThan">assertLessThan()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertLessThanOrEqual">assertLessThanOrEqual()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertNan">assertNan()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertNull">assertNull()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertObjectHasAttribute">assertObjectHasAttribute()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertRegExp">assertRegExp()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertStringMatchesFormat">assertStringMatchesFormat()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertStringMatchesFormatFile">assertStringMatchesFormatFile()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertSame">assertSame()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertStringEndsWith">assertStringEndsWith()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertStringEqualsFile">assertStringEqualsFile()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertStringStartsWith">assertStringStartsWith()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertThat">assertThat()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertTrue">assertTrue()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertXmlFileEqualsXmlFile">assertXmlFileEqualsXmlFile()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertXmlStringEqualsXmlFile">assertXmlStringEqualsXmlFile()</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.assertions.html#appendixes.assertions.assertXmlStringEqualsXmlString">assertXmlStringEqualsXmlString()</a></span></dt></dl></dd><dt><span class="appendix"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html">B. Annotations</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.author">@author</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.after">@after</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.afterClass">@afterClass</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.backupGlobals">@backupGlobals</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.backupStaticAttributes">@backupStaticAttributes</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.before">@before</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.beforeClass">@beforeClass</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.codeCoverageIgnore">@codeCoverageIgnore*</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.covers">@covers</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.coversDefaultClass">@coversDefaultClass</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.coversNothing">@coversNothing</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.dataProvider">@dataProvider</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.depends">@depends</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.expectedException">@expectedException</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.expectedExceptionCode">@expectedExceptionCode</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.expectedExceptionMessage">@expectedExceptionMessage</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.expectedExceptionMessageRegExp">@expectedExceptionMessageRegExp</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.group">@group</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.large">@large</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.medium">@medium</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.preserveGlobalState">@preserveGlobalState</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.requires">@requires</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.runTestsInSeparateProcesses">@runTestsInSeparateProcesses</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.runInSeparateProcess">@runInSeparateProcess</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.small">@small</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.test">@test</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.testdox">@testdox</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.ticket">@ticket</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.uses">@uses</a></span></dt></dl></dd><dt><span class="appendix"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html">C. The XML Configuration File</a></span></dt><dd><dl><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.phpunit">PHPUnit</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.testsuites">Test Suites</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.groups">Groups</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.whitelisting-files">Whitelisting Files for Code Coverage</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.logging">Logging</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.test-listeners">Test Listeners</a></span></dt><dt><span class="section"><a href="https://phpunit.de/manual/current/en/appendixes.configuration.html#appendixes.configuration.php-ini-constants-variables">Setting PHP INI settings, Constants and Global Variables</a></span></dt></dl></dd><dt><span class="appendix"><a href="https://phpunit.de/manual/current/en/appendixes.index.html">D. Index</a></span></dt><dd><dl><dt><span class="index"><a href="https://phpunit.de/manual/current/en/appendixes.index.html#appendixes.index.index"></a></span></dt></dl></dd><dt><span class="appendix"><a href="https://phpunit.de/manual/current/en/appendixes.bibliography.html">E. Bibliography</a></span></dt><dt><span class="appendix"><a href="https://phpunit.de/manual/current/en/appendixes.copyright.html">F. Copyright</a></span></dt></dl>
     </div>
    </div>
    <div class="col-md-8 col-lg-9">
     <div class="row">
      <div class="col-md-1 pull-left prev-nav"><a accesskey="p" href="https://phpunit.de/manual/current/en/textui.html">Prev</a></div>
      <div class="col-md-1 pull-right next-nav"><a accesskey="n" href="https://phpunit.de/manual/current/en/organizing-tests.html">Next</a></div>
     </div>
<div class="chapter"><div class="titlepage"><div><div><h1 class="title"><a id="fixtures"></a>Chapter&nbsp;4.&nbsp;Fixtures</h1></div></div></div><p>
    <a id="idp313264" class="indexterm"></a>

    One of the most time-consuming parts of writing tests is writing the
    code to set the world up in a known state and then return it to its
    original state when the test is complete. This known state is called
    the <span class="emphasis"><em>fixture</em></span> of the test.
  </p><p>
    In <a class="xref" href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.examples.StackTest.php" title="Example 2.1: Testing array operations with PHPUnit">Example 2.1</a>, the
    fixture was simply the array that is stored in the <code class="literal">$stack</code>
    variable. Most of the time, though, the fixture will be more complex
    than a simple array, and the amount of code needed to set it up will
    grow accordingly. The actual content of the test gets lost in the noise
    of setting up the fixture. This problem gets even worse when you write
    several tests with similar fixtures. Without some help from the testing
    framework, we would have to duplicate the code that sets up the fixture
    for each test we write.
  </p><p>
    <a id="idp215632" class="indexterm"></a>
    <a id="idp216208" class="indexterm"></a>
    <a id="idp216784" class="indexterm"></a>

    PHPUnit supports sharing the setup code. Before a test method is run, a
    template method called <code class="literal">setUp()</code> is invoked.
    <code class="literal">setUp()</code> is where you create the objects against which
    you will test. Once the test method has finished running, whether it
    succeeded or failed, another template method called
    <code class="literal">tearDown()</code> is invoked. <code class="literal">tearDown()</code>
    is where you clean up the objects against which you tested.
  </p><p>
    In <a class="xref" href="https://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.examples.StackTest2.php" title="Example 2.2: Using the @depends annotation to express dependencies">Example 2.2</a> we
    used the producer-consumer relationship between tests to share a fixture. This
    is not always desired or even possible. <a class="xref" href="https://phpunit.de/manual/current/en/fixtures.html#fixtures.examples.StackTest.php" title="Example 4.1: Using setUp() to create the stack fixture">Example 4.1</a>
    shows how we can write the tests of the <code class="literal">StackTest</code> in such
    a way that not the fixture itself is reused but the code that creates it.
    First we declare the instance variable, <code class="literal">$stack</code>, that we
    are going to use instead of a method-local variable. Then we put the
    creation of the <code class="literal">array</code> fixture into the
    <code class="literal">setUp()</code> method. Finally, we remove the redundant code
    from the test methods and use the newly introduced instance variable,
    <code class="literal">$this-&gt;stack</code>, instead of the method-local variable
    <code class="literal">$stack</code> with the <code class="literal">assertEquals()</code>
    assertion method.
  </p><div class="example"><a id="fixtures.examples.StackTest.php"></a><p class="title"><strong>Example 4.1: Using setUp() to create the stack fixture</strong></p><div class="example-contents"><pre class="programlisting hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">TestCase</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>
</span>{
    <span class="hljs-keyword">protected</span> $stack;

    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span>
    </span>{
        $this-&gt;stack = [];
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testEmpty</span><span class="hljs-params">()</span>
    </span>{
        $this-&gt;assertTrue(<span class="hljs-keyword">empty</span>($this-&gt;stack));
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPush</span><span class="hljs-params">()</span>
    </span>{
        array_push($this-&gt;stack, <span class="hljs-string">'foo'</span>);
        $this-&gt;assertEquals(<span class="hljs-string">'foo'</span>, $this-&gt;stack[count($this-&gt;stack)<span class="hljs-number">-1</span>]);
        $this-&gt;assertFalse(<span class="hljs-keyword">empty</span>($this-&gt;stack));
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPop</span><span class="hljs-params">()</span>
    </span>{
        array_push($this-&gt;stack, <span class="hljs-string">'foo'</span>);
        $this-&gt;assertEquals(<span class="hljs-string">'foo'</span>, array_pop($this-&gt;stack));
        $this-&gt;assertTrue(<span class="hljs-keyword">empty</span>($this-&gt;stack));
    }
}
<span class="hljs-meta">?&gt;</span></pre></div></div><br class="example-break"><br><p>
    <a id="idp189200" class="indexterm"></a>
    <a id="idp189776" class="indexterm"></a>
    <a id="idp190352" class="indexterm"></a>
    <a id="idp190928" class="indexterm"></a>
    <a id="idp191504" class="indexterm"></a>

    The <code class="literal">setUp()</code> and <code class="literal">tearDown()</code> template
    methods are run once for each test method (and on fresh instances) of the
    test case class.
  </p><p>
    <a id="idp226176" class="indexterm"></a>
    <a id="idp226752" class="indexterm"></a>
    <a id="idp227328" class="indexterm"></a>
    <a id="idp227904" class="indexterm"></a>
    <a id="idp228480" class="indexterm"></a>
    <a id="idp229056" class="indexterm"></a>
    <a id="idp229632" class="indexterm"></a>
    <a id="idp230208" class="indexterm"></a>

    In addition, the <code class="literal">setUpBeforeClass()</code> and
    <code class="literal">tearDownAfterClass()</code> template methods are called before
    the first test of the test case class is run and after the last test of the
    test case class is run, respectively.
  </p><p>
    <a id="idp232272" class="indexterm"></a>

    The example below shows all template methods that are available in a test
    case class.
  </p><div class="example"><a id="fixtures.examples.TemplateMethodsTest.php"></a><p class="title"><strong>Example 4.2: Example showing all template methods available</strong></p><div class="example-contents"><pre class="programlisting hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">TestCase</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TemplateMethodsTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>
</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUpBeforeClass</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assertPreConditions</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testOne</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
        $this-&gt;assertTrue(<span class="hljs-keyword">true</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testTwo</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
        $this-&gt;assertTrue(<span class="hljs-keyword">false</span>);
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assertPostConditions</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDown</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDownAfterClass</span><span class="hljs-params">()</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onNotSuccessfulTest</span><span class="hljs-params">(Exception $e)</span>
    </span>{
        fwrite(STDOUT, <span class="hljs-keyword">__METHOD__</span> . <span class="hljs-string">"\n"</span>);
        <span class="hljs-keyword">throw</span> $e;
    }
}
<span class="hljs-meta">?&gt;</span></pre><pre class="screen"><strong class="userinput"><code>phpunit TemplateMethodsTest</code></strong>
PHPUnit 5.7.0 by Sebastian Bergmann and contributors.

TemplateMethodsTest::setUpBeforeClass
TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testOne
TemplateMethodsTest::assertPostConditions
TemplateMethodsTest::tearDown
.TemplateMethodsTest::setUp
TemplateMethodsTest::assertPreConditions
TemplateMethodsTest::testTwo
TemplateMethodsTest::tearDown
TemplateMethodsTest::onNotSuccessfulTest
FTemplateMethodsTest::tearDownAfterClass


Time: 0 seconds, Memory: 5.25Mb

There was 1 failure:

1) TemplateMethodsTest::testTwo
Failed asserting that &lt;boolean:false&gt; is true.
/home/sb/TemplateMethodsTest.php:30

FAILURES!
Tests: 2, Assertions: 2, Failures: 1.</pre></div></div><br class="example-break"><br><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="fixtures.more-setup-than-teardown"></a>More setUp() than tearDown()</h2></div></div></div><p>
      <code class="literal">setUp()</code> and <code class="literal">tearDown()</code> are nicely
      symmetrical in theory but not in practice. In practice, you only need
      to implement <code class="literal">tearDown()</code> if you have allocated
      external resources like files or sockets in <code class="literal">setUp()</code>.
      If your <code class="literal">setUp()</code> just creates plain PHP objects, you
      can generally ignore <code class="literal">tearDown()</code>. However, if you
      create many objects in your <code class="literal">setUp()</code>, you might want
      to <code class="literal">unset()</code> the variables pointing to those objects
      in your <code class="literal">tearDown()</code> so they can be garbage collected.
      The garbage collection of test case objects is not predictable.
    </p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="fixtures.variations"></a>Variations</h2></div></div></div><p>
      What happens when you have two tests with slightly different setups?
      There are two possibilities:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>
          If the <code class="literal">setUp()</code> code differs only slightly, move
          the code that differs from the <code class="literal">setUp()</code> code to
          the test method.
        </p></li><li class="listitem"><p>
          If you really have a different <code class="literal">setUp()</code>, you need
          a different test case class. Name the class after the difference in
          the setup.
        </p></li></ul></div></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="fixtures.sharing-fixture"></a>Sharing Fixture</h2></div></div></div><p>
      There are few good reasons to share fixtures between tests, but in most
      cases the need to share a fixture between tests stems from an unresolved
      design problem.
    </p><p>
      A good example of a fixture that makes sense to share across several
      tests is a database connection: you log into the database once and reuse
      the database connection instead of creating a new connection for each
      test. This makes your tests run faster.
    </p><p>
      <a id="idp444608" class="indexterm"></a>
      <a id="idp445184" class="indexterm"></a>

      <a class="xref" href="https://phpunit.de/manual/current/en/fixtures.html#fixtures.sharing-fixture.examples.DatabaseTest.php" title="Example 4.3: Sharing fixture between the tests of a test suite">Example 4.3</a>
      uses the <code class="literal">setUpBeforeClass()</code> and
      <code class="literal">tearDownAfterClass()</code> template methods to connect to the
      database before the test case class' first test and to disconnect from the
      database after the last test of the test case, respectively.
    </p><div class="example"><a id="fixtures.sharing-fixture.examples.DatabaseTest.php"></a><p class="title"><strong>Example 4.3: Sharing fixture between the tests of a test suite</strong></p><div class="example-contents"><pre class="programlisting hljs php"><span class="hljs-meta">&lt;?php</span>
<span class="hljs-keyword">use</span> <span class="hljs-title">PHPUnit</span>\<span class="hljs-title">Framework</span>\<span class="hljs-title">TestCase</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DatabaseTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>
</span>{
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> $dbh;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setUpBeforeClass</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">self</span>::$dbh = <span class="hljs-keyword">new</span> PDO(<span class="hljs-string">'sqlite::memory:'</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tearDownAfterClass</span><span class="hljs-params">()</span>
    </span>{
        <span class="hljs-keyword">self</span>::$dbh = <span class="hljs-keyword">null</span>;
    }
}
<span class="hljs-meta">?&gt;</span></pre></div></div><br class="example-break"><br><p>
      It cannot be emphasized enough that sharing fixtures between tests
      reduces the value of the tests. The underlying design problem is
      that objects are not loosely coupled. You will achieve better
      results solving the underlying design problem and then writing tests
      using stubs (see <a class="xref" href="https://phpunit.de/manual/current/en/test-doubles.html" title="Chapter 9. Test Doubles">Chapter 9</a>), than by creating
      dependencies between tests at runtime and ignoring the opportunity
      to improve your design.
    </p></div><div class="section"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="fixtures.global-state"></a>Global State</h2></div></div></div><p>
      <a class="ulink" href="http://googletesting.blogspot.com/2008/05/tott-using-dependancy-injection-to.html" target="_top">It is hard to test code that uses singletons.</a>
      The same is true for code that uses global variables. Typically, the code
      you want to test is coupled strongly with a global variable and you cannot
      control its creation. An additional problem is the fact that one test's
      change to a global variable might break another test.
    </p><p>
      In PHP, global variables work like this:
    </p><div class="itemizedlist"><ul class="itemizedlist" style="list-style-type: disc; "><li class="listitem"><p>A global variable <code class="literal">$foo = 'bar';</code> is stored as <code class="literal">$GLOBALS['foo'] = 'bar';</code>.</p></li><li class="listitem"><p>The <code class="literal">$GLOBALS</code> variable is a so-called <span class="emphasis"><em>super-global</em></span> variable.</p></li><li class="listitem"><p>Super-global variables are built-in variables that are always available in all scopes.</p></li><li class="listitem"><p>In the scope of a function or method, you may access the global variable <code class="literal">$foo</code> by either directly accessing <code class="literal">$GLOBALS['foo']</code> or by using <code class="literal">global $foo;</code> to create a local variable with a reference to the global variable.</p></li></ul></div><p>
      Besides global variables, static attributes of classes are also part of
      the global state.
    </p><p>
      <a id="idp460688" class="indexterm"></a>
      <a id="idp461264" class="indexterm"></a>

      By default, PHPUnit runs your tests in a way where changes to global
      and super-global variables (<code class="literal">$GLOBALS</code>,
      <code class="literal">$_ENV</code>, <code class="literal">$_POST</code>,
      <code class="literal">$_GET</code>, <code class="literal">$_COOKIE</code>,
      <code class="literal">$_SERVER</code>, <code class="literal">$_FILES</code>,
      <code class="literal">$_REQUEST</code>) do not affect other tests. Optionally, this
      isolation can be extended to static attributes of classes.
    </p><div class="alert alert-info"><h3 class="title">Note</h3><p>
        The backup and restore operations for global variables and static
        class attributes use <code class="literal">serialize()</code> and
        <code class="literal">unserialize()</code>.
      </p><p>
        Objects of some classes (e.g., <code class="literal">PDO</code>) cannot be
        serialized and the backup operation will break when such an object is
        stored e.g. in the <code class="literal">$GLOBALS</code> array.
      </p></div><p>
      <a id="idp469360" class="indexterm"></a>
      <a id="idp470064" class="indexterm"></a>

      The <code class="literal">@backupGlobals</code> annotation that is discussed in
      <a class="xref" href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.backupGlobals" title="@backupGlobals">the section called “@backupGlobals”</a> can be used to
      control the backup and restore operations for global variables.
      Alternatively, you can provide a blacklist of global variables that are to
      be excluded from the backup and restore operations like this
      </p><pre class="programlisting hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>
</span>{
    <span class="hljs-keyword">protected</span> $backupGlobalsBlacklist = [<span class="hljs-string">'globalVariable'</span>];

    <span class="hljs-comment">// ...</span>
}</pre><p>
    </p><div class="alert alert-info"><h3 class="title">Note</h3><p>
        Setting the <code class="literal">$backupGlobalsBlacklist</code> property inside
        e.g. the <code class="literal">setUp()</code> method has no effect.
      </p></div><p>
      <a id="idp474848" class="indexterm"></a>
      <a id="idp475552" class="indexterm"></a>

      The <code class="literal">@backupStaticAttributes</code> annotation discussed in
      <a class="xref" href="https://phpunit.de/manual/current/en/appendixes.annotations.html#appendixes.annotations.backupStaticAttributes" title="@backupStaticAttributes">the section called “@backupStaticAttributes”</a>
      can be used to back up all static property values in all declared classes
      before each test and restore them afterwards.
    </p><p>
      It processes all classes that are declared at the time a test starts, not
      only the test class itself. It only applies to static class properties,
      not static variables within functions.
    </p><div class="alert alert-info"><h3 class="title">Note</h3><p>
        The <code class="literal">@backupStaticAttributes</code> operation is executed
        before a test method, but only if it is enabled. If a static value was
        changed by a previously executed test that did not have
        <code class="literal">@backupStaticAttributes</code> enabled, then that value will
        be backed up and restored — not the originally declared default value.
        PHP does not record the originally declared default value of any static
        variable.
      </p><p>
        The same applies to static properties of classes that were newly
        loaded/declared within a test. They cannot be reset to their originally
        declared default value after the test, since that value is unknown.
        Whichever value is set will leak into subsequent tests.
      </p><p>
        For unit tests, it is recommended to explicitly reset the values of
        static properties under test in your <code class="literal">setUp()</code> code
        instead (and ideally also <code class="literal">tearDown()</code>, so as to not
        affect subsequently executed tests).
      </p></div><p>
      You can provide a blacklist of static attributes that are to be excluded
      from the backup and restore operations:

      </p><pre class="programlisting hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">TestCase</span>
</span>{
    <span class="hljs-keyword">protected</span> $backupStaticAttributesBlacklist = [
        <span class="hljs-string">'className'</span> =&gt; [<span class="hljs-string">'attributeName'</span>]
    ];

    <span class="hljs-comment">// ...</span>
}
</pre><p>
    </p><div class="alert alert-info"><h3 class="title">Note</h3><p>
        Setting the <code class="literal">$backupStaticAttributesBlacklist</code> property
        inside e.g. the <code class="literal">setUp()</code> method has no effect.
      </p></div></div></div>
     <div class="row">
      <div class="col-md-1 pull-left prev-nav"><a accesskey="p" href="https://phpunit.de/manual/current/en/textui.html">Prev</a></div>
      <div class="col-md-1 pull-right next-nav"><a accesskey="n" href="https://phpunit.de/manual/current/en/organizing-tests.html">Next</a></div>
     </div>
<div class="row"><div class="col-md-2"></div><div class="col-md-8"><div class="alert alert-info" style="text-align: center;">Please <a href="https://github.com/sebastianbergmann/phpunit-documentation/issues">open a ticket</a> on GitHub to suggest improvements to this page. Thanks!</div></div><div class="col-md-2"></div></div>
    </div>
   </div>
   <hr>
   <footer>
    <p><a href="https://phpunit.de/manual/current/en/appendixes.copyright.html">Copyright</a> © 2005-2017 <a href="http://sebastian-bergmann.de/">Sebastian Bergmann</a>.</p>
   </footer>
  </div>
  <script src="./PHPUnit Manual – Chapter 4. Fixtures_files/jquery.js"></script>
  <script src="./PHPUnit Manual – Chapter 4. Fixtures_files/bootstrap.min.js"></script>
  <script src="./PHPUnit Manual – Chapter 4. Fixtures_files/highlight.pack.js"></script>
  <script type="text/javascript">
  $(document).ready(function() { $('pre.programlisting').each(function(i, e) {hljs.highlightBlock(e)}); });
  </script>
 

</body></html>